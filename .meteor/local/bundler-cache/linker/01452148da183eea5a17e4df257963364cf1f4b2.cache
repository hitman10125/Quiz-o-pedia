[{"type":"js","data":"/* Imports for global scope */\n\nMongoInternals = Package.mongo.MongoInternals;\nMongo = Package.mongo.Mongo;\nReactiveVar = Package['reactive-var'].ReactiveVar;\nTracker = Package.tracker.Tracker;\nDeps = Package.tracker.Deps;\nECMAScript = Package.ecmascript.ECMAScript;\nRouter = Package['iron:router'].Router;\nRouteController = Package['iron:router'].RouteController;\nMeteor = Package.meteor.Meteor;\nglobal = Package.meteor.global;\nmeteorEnv = Package.meteor.meteorEnv;\nWebApp = Package.webapp.WebApp;\nmain = Package.webapp.main;\nWebAppInternals = Package.webapp.WebAppInternals;\n_ = Package.underscore._;\nDDP = Package['ddp-client'].DDP;\nDDPServer = Package['ddp-server'].DDPServer;\nLaunchScreen = Package['launch-screen'].LaunchScreen;\nBlaze = Package.ui.Blaze;\nUI = Package.ui.UI;\nHandlebars = Package.ui.Handlebars;\nSpacebars = Package.spacebars.Spacebars;\nmeteorInstall = Package.modules.meteorInstall;\nBuffer = Package.modules.Buffer;\nprocess = Package.modules.process;\nSymbol = Package['ecmascript-runtime'].Symbol;\nMap = Package['ecmascript-runtime'].Map;\nSet = Package['ecmascript-runtime'].Set;\nmeteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nPromise = Package.promise.Promise;\nIron = Package['iron:core'].Iron;\nAccounts = Package['accounts-base'].Accounts;\nAutoupdate = Package.autoupdate.Autoupdate;\nHTML = Package.htmljs.HTML;\n\n","servePath":"/packages/global-imports.js"},{"type":"js","data":"var require = meteorInstall({\"ind_quiz.js\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// ind_quiz.js                                                                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nThisQuiz = new Mongo.Collection(\"quizzes\");                                                                            // 1\nThisResponse = new Mongo.Collection(\"responses\");                                                                      // 2\nvar q = 0;                                                                                                             // 3\nif (Meteor.isClient) {                                                                                                 // 4\n  var updateTimeLeft;                                                                                                  // 5\n  Template.signupForm.events({                                                                                         // 6\n    'submit #signup-form': function () {                                                                               // 7\n      function submitSignupForm(e, t) {                                                                                // 7\n        e.preventDefault();                                                                                            // 8\n                                                                                                                       //\n        var input = t.find('#signup-password').value;                                                                  // 10\n        var input2 = t.find('#signup-confirm').value;                                                                  // 11\n        if (input.length < 4 || input.length > 8) {                                                                    // 12\n          alert(\"Please input the password between \" + 4 + \" and \" + 8 + \" characters\");                               // 14\n          return false;                                                                                                // 15\n        } else {                                                                                                       //\n          if (input != input2) {                                                                                       // 18\n            alert(\"Password Mismatch\");                                                                                // 19\n          } else {                                                                                                     //\n            Accounts.createUser({                                                                                      // 23\n              username: t.find('#signup-username').value,                                                              // 24\n              password: t.find('#signup-password').value,                                                              // 25\n              email: t.find('#signup-email').value,                                                                    // 26\n              profile: {                                                                                               // 27\n                confirm: t.find('#signup-confirm').value,                                                              // 28\n                current_response_id: \"\"                                                                                // 29\n              }                                                                                                        //\n                                                                                                                       //\n            });                                                                                                        //\n                                                                                                                       //\n            t.find('#signup-username').value = \"\";                                                                     // 34\n            t.find('#signup-password').value = \"\";                                                                     // 35\n            t.find('#signup-email').value = \"\";                                                                        // 36\n            t.find('#signup-confirm').value = \"\";                                                                      // 37\n            //console.log(\"signed up\");                                                                                //\n            //  Meteor.logout();                                                                                       //\n          }                                                                                                            // 22\n        }                                                                                                              //\n      }                                                                                                                //\n                                                                                                                       //\n      return submitSignupForm;                                                                                         //\n    }()                                                                                                                //\n  });                                                                                                                  //\n                                                                                                                       //\n  Template.loginForm.events({                                                                                          // 45\n    'submit #login-form': function () {                                                                                // 46\n      function submitLoginForm(e, t) {                                                                                 // 46\n        e.preventDefault();                                                                                            // 47\n                                                                                                                       //\n        var unam = t.find('#login-username').value;                                                                    // 49\n        var password = t.find('#login-password').value;                                                                // 50\n                                                                                                                       //\n        Meteor.loginWithPassword(unam, password);                                                                      // 52\n        Router.go('quiz');                                                                                             // 53\n      }                                                                                                                //\n                                                                                                                       //\n      return submitLoginForm;                                                                                          //\n    }()                                                                                                                //\n  });                                                                                                                  //\n                                                                                                                       //\n  var quizQuestions = [];                                                                                              // 58\n                                                                                                                       //\n  changeAnswer = function changeAnswer(question) {                                                                     // 60\n    Meteor.call(\"getResponse\", question, function (error, result) {                                                    // 61\n      if (error) console.log(error.reason);else {                                                                      // 62\n        if (result) $('input[name=questionAnswer][value=' + result + ']').prop('checked', true);else $('input[name=questionAnswer]').prop('checked', false);\n      }                                                                                                                //\n    });                                                                                                                //\n  };                                                                                                                   //\n                                                                                                                       //\n  /* **************************************************************************************************** */           //\n                                                                                                                       //\n  Template.questionSelect.onCreated(function () {                                                                      // 4\n    this.time_left = new ReactiveVar(1200);                                                                            // 76\n    Session.clear('updateTimeLeft');                                                                                   // 77\n  });                                                                                                                  //\n                                                                                                                       //\n  Template.waiting_time.onCreated(function () {                                                                        // 80\n    this.time_left = new ReactiveVar(300);                                                                             // 81\n    Session.clear('updateWaitingTimeLeft');                                                                            // 82\n  });                                                                                                                  //\n                                                                                                                       //\n  Template.questionSelect.onRendered(function () {                                                                     // 85\n    clearInterval(Session.get('updateTimeLeft'));                                                                      // 86\n    var self = this;                                                                                                   // 87\n                                                                                                                       //\n    Meteor.call(\"getQuiz\", function (error, result) {                                                                  // 89\n      if (error) console.log(error.reason);else {                                                                      // 90\n        quizQuestions = result;                                                                                        // 93\n        Session.set('selectedQuestion', '1');                                                                          // 94\n        changeAnswer('1');                                                                                             // 95\n      }                                                                                                                //\n    });                                                                                                                //\n                                                                                                                       //\n    Meteor.call(\"getTimer\", function (error, result) {                                                                 // 101\n      if (error) console.log(error.reason);else {                                                                      // 102\n        self.time_left.set(result);                                                                                    // 105\n      }                                                                                                                //\n    });                                                                                                                //\n                                                                                                                       //\n    updateTimeLeft = setInterval(function () {                                                                         // 109\n      self.time_left.set(self.time_left.get() - 1);                                                                    // 110\n      Meteor.call('setTimer', self.time_left.get());                                                                   // 111\n    }, 1000);                                                                                                          //\n    Session.setPersistent('updateTimeLeft', updateTimeLeft);                                                           // 113\n    //setTimeLeft =  setInterval( function() {Meteor.call('setTimer', self.time_left.get())} , 5000 );                 //\n    //Session.set('updateTimeLeft', updateTimeLeft);                                                                   //\n    //Session.set('setTimeLeft', setTimeLeft);                                                                         //\n  });                                                                                                                  // 85\n                                                                                                                       //\n  Template.questionSelect.onDestroyed(function () {                                                                    // 119\n    //console.log('Naman');                                                                                            //\n    clearInterval('updateTimeLeft');                                                                                   // 121\n  });                                                                                                                  //\n                                                                                                                       //\n  Template.waiting_time.onDestroyed(function () {                                                                      // 124\n    //console.log('Naman');                                                                                            //\n    clearInterval('updateWaitingTimeLeft');                                                                            // 126\n    Session.clear('subscribed');                                                                                       // 127\n  });                                                                                                                  //\n                                                                                                                       //\n  Template.waiting_time.onRendered(function () {                                                                       // 130\n    clearInterval(Session.get('updateWaitingTimeLeft'));                                                               // 131\n    var self = this;                                                                                                   // 132\n                                                                                                                       //\n    Meteor.call(\"getWaitingTimer\", function (error, result) {                                                          // 134\n      if (error) console.log(error.reason);else {                                                                      // 135\n        self.time_left.set(result);                                                                                    // 138\n      }                                                                                                                //\n    });                                                                                                                //\n                                                                                                                       //\n    updateWaitingTimeLeft = setInterval(function () {                                                                  // 142\n      self.time_left.set(self.time_left.get() - 1);                                                                    // 143\n      Meteor.call('setWaitingTimer', self.time_left.get());                                                            // 144\n    }, 1000);                                                                                                          //\n    Session.set('updateWaitingTimeLeft', updateWaitingTimeLeft);                                                       // 146\n    // Session.set('updateTimeLeft', updateTimeLeft);                                                                  //\n    // Session.set('setTimeLeft', setTimeLeft);                                                                        //\n  });                                                                                                                  //\n  Template.waiting_time.events({                                                                                       // 130\n                                                                                                                       //\n    'click #logoutbtn': function () {                                                                                  // 153\n      function clickLogoutbtn() {                                                                                      // 153\n        Meteor.call('endquiz', Meteor.userId());                                                                       // 154\n        clearInterval(Session.get('updateWaitingTimeLeft'));                                                           // 155\n        clearInterval(Session.get('updateTimeLeft'));                                                                  // 156\n        Session.clear('final_answer');                                                                                 // 157\n        Session.clear('subscribed');                                                                                   // 158\n        Meteor.logout();                                                                                               // 159\n      }                                                                                                                //\n                                                                                                                       //\n      return clickLogoutbtn;                                                                                           //\n    }()                                                                                                                //\n  });                                                                                                                  //\n                                                                                                                       //\n  Template.questionSelect.events({                                                                                     // 165\n    'click input': function () {                                                                                       // 166\n      function clickInput(event, template) {                                                                           // 166\n        Session.set('selectedQuestion', event.target.value);                                                           // 167\n        changeAnswer(event.target.value);                                                                              // 168\n      }                                                                                                                //\n                                                                                                                       //\n      return clickInput;                                                                                               //\n    }()                                                                                                                //\n  });                                                                                                                  //\n                                                                                                                       //\n  Template.online.helpers({                                                                                            // 172\n    'showGroupQuizzes': function () {                                                                                  // 173\n      function showGroupQuizzes() {                                                                                    // 173\n        var groupQuizzes = ThisResponse.find({ type: 'Group' }).fetch();                                               // 174\n        var time = new Date();                                                                                         // 175\n        for (i = 0; i < groupQuizzes.length; i++) {                                                                    // 176\n          // var date = new Date(Date.parse(time) - Date.parse(groupQuizzes[i].createdAt));                            //\n          // if(date.getMinutes() > 30) {                                                                              //\n          //   groupQuizzes.splice(i, 1);                                                                              //\n          // }                                                                                                         //\n          if (groupQuizzes[i].waiting_time <= 0) {                                                                     // 181\n            console.log('Hello');                                                                                      // 182\n            groupQuizzes.splice(i, 1);                                                                                 // 183\n          }                                                                                                            //\n        }                                                                                                              //\n        return groupQuizzes;                                                                                           // 186\n      }                                                                                                                //\n                                                                                                                       //\n      return showGroupQuizzes;                                                                                         //\n    }(),                                                                                                               //\n    'totalGroupQuizzes': function () {                                                                                 // 188\n      function totalGroupQuizzes() {                                                                                   // 188\n        var groupQuizzes = ThisResponse.find({ type: 'Group' }).fetch();                                               // 189\n        var time = new Date();                                                                                         // 190\n        for (i = 0; i < groupQuizzes.length; i++) {                                                                    // 191\n          // var date = new Date(Date.parse(time) - Date.parse(groupQuizzes[i].createdAt));                            //\n          // if(date.getMinutes() > 30) {                                                                              //\n          //   groupQuizzes.splice(i, 1);                                                                              //\n          // }                                                                                                         //\n          if (groupQuizzes[i].waiting_time <= 0) {                                                                     // 196\n            groupQuizzes.splice(i, 1);                                                                                 // 197\n          }                                                                                                            //\n        }                                                                                                              //\n        return groupQuizzes.length > 0;                                                                                // 200\n      }                                                                                                                //\n                                                                                                                       //\n      return totalGroupQuizzes;                                                                                        //\n    }()                                                                                                                //\n  });                                                                                                                  //\n                                                                                                                       //\n  Template.online.events({                                                                                             // 204\n    'click input': function () {                                                                                       // 205\n      function clickInput() {                                                                                          // 205\n        event.preventDefault();                                                                                        // 206\n        // var quizID = $(event.target).attr('id');                                                                    //\n        // var userID = $(event.target).attr('name');                                                                  //\n        var responseID = $(event.target).attr('id');                                                                   // 205\n        var subscribed = $(event.target).attr('value');                                                                // 210\n        console.log(subscribed);                                                                                       // 211\n        Session.setPersistent('subscribed', subscribed);                                                               // 212\n        // var category = ThisResponse.find({userID: userID, quizID: quizID}).fetch()[0].category;                     //\n        // var timeLeft = ThisResponse.find({userID: userID, quizID: quizID}).fetch()[0].waiting_time;                 //\n        // console.log(quizID+\"  \"+userID+\"  \"+category+\"  \"+timeLeft+\"  \"+responseID);                                //\n        Meteor.call('setGroupResponseId', responseID);                                                                 // 205\n      }                                                                                                                //\n                                                                                                                       //\n      return clickInput;                                                                                               //\n    }()                                                                                                                //\n  });                                                                                                                  //\n                                                                                                                       //\n  Template.questionSelect.helpers({                                                                                    // 220\n    time_left: function () {                                                                                           // 221\n      function time_left() {                                                                                           // 221\n        var time = Template.instance().time_left.get();                                                                // 222\n        Session.set('timeLeft', time);                                                                                 // 223\n        var minutes = (Math.floor(time / 60) < 10 ? '0' : '') + Math.floor(time / 60);                                 // 224\n        var seconds = (time % 60 < 10 ? '0' : '') + time % 60;                                                         // 225\n        if (time <= 0) {                                                                                               // 226\n          clearInterval(Session.get('updateWaitingTimeLeft'));                                                         // 227\n          clearInterval(Session.get('updateTimeLeft'));                                                                // 228\n          Session.clear('final_answer');                                                                               // 229\n          Session.clear('subscribed');                                                                                 // 230\n        }                                                                                                              //\n        return minutes + \":\" + seconds;                                                                                // 232\n      }                                                                                                                //\n                                                                                                                       //\n      return time_left;                                                                                                //\n    }(),                                                                                                               //\n    'ended': function () {                                                                                             // 234\n      function ended() {                                                                                               // 234\n        return Session.get('timeLeft') <= 0;                                                                           // 235\n      }                                                                                                                //\n                                                                                                                       //\n      return ended;                                                                                                    //\n    }()                                                                                                                //\n  });                                                                                                                  //\n                                                                                                                       //\n  Template.waiting_time.helpers({                                                                                      // 239\n    time_left: function () {                                                                                           // 240\n      function time_left() {                                                                                           // 240\n        var time = Template.instance().time_left.get();                                                                // 241\n        Session.set('timeLeft', time);                                                                                 // 242\n        var minutes = (Math.floor(time / 60) < 10 ? '0' : '') + Math.floor(time / 60);                                 // 243\n        var seconds = (time % 60 < 10 ? '0' : '') + time % 60;                                                         // 244\n        if (time <= 0) {                                                                                               // 245\n          clearInterval(Session.get('updateWaitingTimeLeft'));                                                         // 246\n          clearInterval(Session.get('updateTimeLeft'));                                                                // 247\n          Session.clear('final_answer');                                                                               // 248\n          Session.clear('subscribed');                                                                                 // 249\n        }                                                                                                              //\n        return minutes + \":\" + seconds;                                                                                // 251\n      }                                                                                                                //\n                                                                                                                       //\n      return time_left;                                                                                                //\n    }()                                                                                                                //\n  });                                                                                                                  //\n                                                                                                                       //\n  /* **************************************************************************************************** */           //\n                                                                                                                       //\n  Template.questionShow.events({                                                                                       // 4\n    'click input': function () {                                                                                       // 258\n      function clickInput(event, template) {                                                                           // 258\n        Meteor.call('setResponse', parseInt(Session.get('selectedQuestion')), event.target.value);                     // 259\n      }                                                                                                                //\n                                                                                                                       //\n      return clickInput;                                                                                               //\n    }(),                                                                                                               //\n    'click #logoutbtn': function () {                                                                                  // 261\n      function clickLogoutbtn() {                                                                                      // 261\n        Meteor.call('endquiz', Meteor.userId());                                                                       // 262\n        clearInterval(Session.get('updateWaitingTimeLeft'));                                                           // 263\n        clearInterval(Session.get('updateTimeLeft'));                                                                  // 264\n        Session.clear('final_answer');                                                                                 // 265\n        Session.clear('subscribed');                                                                                   // 266\n        Meteor.logout();                                                                                               // 267\n      }                                                                                                                //\n                                                                                                                       //\n      return clickLogoutbtn;                                                                                           //\n    }(),                                                                                                               //\n    'click #onsubmitbutton': function () {                                                                             // 270\n      function clickOnsubmitbutton() {                                                                                 // 270\n                                                                                                                       //\n        var final_answer = $('#onsubmitbutton').attr('value');                                                         // 272\n        Session.setPersistent('final_answer', final_answer);                                                           // 273\n        console.log(\"going Here\");                                                                                     // 274\n        Meteor.call(\"getQuestionSet\", function (error, result) {                                                       // 275\n          if (error) {                                                                                                 // 276\n                                                                                                                       //\n            console.log(error.reason);                                                                                 // 278\n          } else {                                                                                                     //\n                                                                                                                       //\n            Session.set('selectedScore', result);                                                                      // 283\n            console.log(Session.get('selectedScore'));                                                                 // 284\n          }                                                                                                            //\n        });                                                                                                            //\n                                                                                                                       //\n        Meteor.call(\"getResponseSet\", function (error, result) {                                                       // 288\n          if (error) {                                                                                                 // 289\n            //console.log(\"Chu\");                                                                                      //\n            console.log(error.reason);                                                                                 // 291\n          } else {                                                                                                     //\n            Session.set('selectedScore1', result);                                                                     // 295\n            console.log(Session.get('selectedScore1'));                                                                // 296\n          }                                                                                                            //\n        });                                                                                                            //\n                                                                                                                       //\n        Meteor.call(\"getActualScore\", function (error, result) {                                                       // 300\n          if (error) {                                                                                                 // 301\n                                                                                                                       //\n            console.log(error.reason);                                                                                 // 303\n          } else {                                                                                                     //\n                                                                                                                       //\n            Session.set('selectedScore2', result);                                                                     // 308\n            console.log(Session.get('selectedScore2'));                                                                // 309\n            console.log(\"aaasssssss\" + Session.get('selectedScore2'));                                                 // 310\n          }                                                                                                            //\n        });                                                                                                            //\n        Router.go('scoreCard');                                                                                        // 313\n      }                                                                                                                //\n                                                                                                                       //\n      return clickOnsubmitbutton;                                                                                      //\n    }()                                                                                                                //\n  });                                                                                                                  //\n                                                                                                                       //\n  Template.questionShow.helpers({                                                                                      // 317\n    questionData: function () {                                                                                        // 318\n      function questionData() {                                                                                        // 318\n        return quizQuestions[parseInt(Session.get('selectedQuestion')) - 1];                                           // 319\n      }                                                                                                                //\n                                                                                                                       //\n      return questionData;                                                                                             //\n    }(),                                                                                                               //\n                                                                                                                       //\n    'showSubmitButton': function () {                                                                                  // 322\n      function showSubmitButton() {                                                                                    // 322\n        return Session.get('selectedType') === 'Individual' || ThisResponse.findOne(Meteor.users.findOne(Meteor.user()).profile.current_response_id).time_left <= 0;\n      }                                                                                                                //\n                                                                                                                       //\n      return showSubmitButton;                                                                                         //\n    }()                                                                                                                //\n  });                                                                                                                  //\n                                                                                                                       //\n  /* **************************************************************************************************** */           //\n                                                                                                                       //\n  Template.quizSelect.events({                                                                                         // 4\n    \"submit .quizParameters\": function () {                                                                            // 330\n      function submitQuizParameters(event) {                                                                           // 330\n        event.preventDefault();                                                                                        // 331\n        var selectedType = event.target.quizType.value;                                                                // 332\n        var selectedCategory = event.target.quizCategory.value;                                                        // 333\n        Session.setPersistent('selectedType', selectedType);                                                           // 334\n        Meteor.call(\"createResponse\", selectedType, selectedCategory);                                                 // 335\n      }                                                                                                                //\n                                                                                                                       //\n      return submitQuizParameters;                                                                                     //\n    }(),                                                                                                               //\n    'click #logoutbtn': function () {                                                                                  // 337\n      function clickLogoutbtn() {                                                                                      // 337\n        Meteor.call('endquiz', Meteor.userId());                                                                       // 338\n        clearInterval(Session.get('updateWaitingTimeLeft'));                                                           // 339\n        clearInterval(Session.get('updateTimeLeft'));                                                                  // 340\n        Session.clear('final_answer');                                                                                 // 341\n        Session.clear('subscribed');                                                                                   // 342\n        Meteor.logout();                                                                                               // 343\n      }                                                                                                                //\n                                                                                                                       //\n      return clickLogoutbtn;                                                                                           //\n    }()                                                                                                                //\n                                                                                                                       //\n  });                                                                                                                  //\n                                                                                                                       //\n  Template.scoreCard.events({                                                                                          // 348\n                                                                                                                       //\n    'click #logoutbtn': function () {                                                                                  // 350\n      function clickLogoutbtn() {                                                                                      // 350\n        Meteor.call('endquiz', Meteor.userId());                                                                       // 351\n        clearInterval(Session.get('updateWaitingTimeLeft'));                                                           // 352\n        clearInterval(Session.get('updateTimeLeft'));                                                                  // 353\n        Session.clear('final_answer');                                                                                 // 354\n        Session.clear('subscribed');                                                                                   // 355\n        Meteor.logout();                                                                                               // 356\n      }                                                                                                                //\n                                                                                                                       //\n      return clickLogoutbtn;                                                                                           //\n    }(),                                                                                                               //\n                                                                                                                       //\n    'click #onsubmitbutton': function () {                                                                             // 359\n      function clickOnsubmitbutton() {                                                                                 // 359\n        Meteor.call(\"getRanking\", function (error, result) {                                                           // 360\n          if (error) {                                                                                                 // 361\n                                                                                                                       //\n            console.log(error.reason);                                                                                 // 363\n          } else {                                                                                                     //\n                                                                                                                       //\n            Session.set('rank', result);                                                                               // 368\n            console.log(Session.get('rank'));                                                                          // 369\n          }                                                                                                            //\n        });                                                                                                            //\n                                                                                                                       //\n        Router.go('ranking');                                                                                          // 373\n      }                                                                                                                //\n                                                                                                                       //\n      return clickOnsubmitbutton;                                                                                      //\n    }()                                                                                                                //\n                                                                                                                       //\n  });                                                                                                                  //\n                                                                                                                       //\n  Template.scoreCard.helpers({                                                                                         // 379\n                                                                                                                       //\n    questionData: function () {                                                                                        // 381\n      function questionData() {                                                                                        // 381\n                                                                                                                       //\n        var arr1 = [];                                                                                                 // 383\n        var arr2 = [];                                                                                                 // 384\n        var arr3 = [];                                                                                                 // 385\n        var arr4 = [];                                                                                                 // 386\n        var arr5 = [];                                                                                                 // 387\n        var arr6 = [];                                                                                                 // 388\n        var arr7 = [];                                                                                                 // 389\n        var arr8 = [];                                                                                                 // 390\n        var arrayFinal = [];                                                                                           // 391\n        for (var i = 0; i < 2; i++) {                                                                                  // 392\n          arr1[i] = Session.get('selectedScore')[i].question;                                                          // 394\n          //  console.log('arr1 '+arr1[i]);                                                                            //\n          arr2[i] = Session.get('selectedScore')[i].option1;                                                           // 393\n          arr3[i] = Session.get('selectedScore')[i].option2;                                                           // 397\n          arr4[i] = Session.get('selectedScore')[i].option3;                                                           // 398\n          arr5[i] = Session.get('selectedScore')[i].option4;                                                           // 399\n          arr6[i] = Session.get('selectedScore')[i].answer;                                                            // 400\n          //   console.log('arr2 '+arr2[i]);                                                                           //\n          arr7[i] = Session.get('selectedScore1')[i + 1];                                                              // 393\n                                                                                                                       //\n          arr8[i] = Session.get('selectedScore2')[i];                                                                  // 404\n          //console.log('arr8 '+arr8[i]);                                                                              //\n          var obj = { arr1: arr1[i], arr2: arr2[i], arr3: arr3[i], arr4: arr4[i], arr5: arr5[i], arr6: arr6[i], arr7: arr7[i], arr8: arr8[i] };\n          arrayFinal.push(obj);                                                                                        // 407\n        }                                                                                                              //\n                                                                                                                       //\n        console.log(\"here....................\", arrayFinal);                                                           // 412\n        //return {k1 : Session.get('selectedScore')[0], k2 : Session.get('selectedScore1')[1]};                        //\n        console.log('final............. ' + arrayFinal[0].arr1);                                                       // 381\n        return arrayFinal;                                                                                             // 415\n        //return {question : 'Hi', option1: 'Hellow'};                                                                 //\n      }                                                                                                                // 381\n                                                                                                                       //\n      return questionData;                                                                                             //\n    }(),                                                                                                               //\n                                                                                                                       //\n    'getTotalScore': function () {                                                                                     // 419\n      function getTotalScore() {                                                                                       // 419\n        return Session.get('selectedScore2')[2];                                                                       // 420\n      }                                                                                                                //\n                                                                                                                       //\n      return getTotalScore;                                                                                            //\n    }()                                                                                                                //\n                                                                                                                       //\n  });                                                                                                                  //\n                                                                                                                       //\n  Template.ranking.helpers({                                                                                           // 427\n    'userRanking': function () {                                                                                       // 428\n      function userRanking() {                                                                                         // 428\n        var arr1 = [];                                                                                                 // 429\n        var arr2 = [];                                                                                                 // 430\n                                                                                                                       //\n        var array = [];                                                                                                // 432\n        console.log(\"......................->\" + Session.get('rank') + \"<-......................\");                    // 433\n        for (var i = 0; i < 2; i++) {                                                                                  // 434\n          arr1[i] = Session.get('rank')[i][0];                                                                         // 435\n          arr2[i] = Session.get('rank')[i][1];                                                                         // 436\n          var obj = { arr1: arr1[i], arr2: arr2[i] };                                                                  // 437\n          console.log(obj + \"Hello\");                                                                                  // 438\n          array.push(obj);                                                                                             // 439\n        }                                                                                                              //\n        return array;                                                                                                  // 441\n      }                                                                                                                //\n                                                                                                                       //\n      return userRanking;                                                                                              //\n    }()                                                                                                                //\n  });                                                                                                                  //\n                                                                                                                       //\n  /* **************************************************************************************************** */           //\n}                                                                                                                      // 4\n                                                                                                                       //\n// Router.configure({                                                                                                  //\n//   layoutTemplate: 'ApplicationLayout'                                                                               //\n// });                                                                                                                 //\n                                                                                                                       //\n// Router.route('/scoreCard',{                                                                                         //\n// name:'scoreCard',                                                                                                   //\n// template:'scoreCard'                                                                                                //\n// });                                                                                                                 //\nRouter.route('/', {                                                                                                    // 456\n  name: 'home',                                                                                                        // 457\n  template: 'appBody'                                                                                                  // 458\n});                                                                                                                    //\n                                                                                                                       //\nRouter.route('/quiz', {                                                                                                // 461\n  name: 'quiz',                                                                                                        // 462\n  template: 'ApplicationLayout',                                                                                       // 463\n  onBeforeAction: function () {                                                                                        // 464\n    function onBeforeAction() {                                                                                        // 464\n      if (!Meteor.userId()) {                                                                                          // 465\n        this.next();                                                                                                   // 466\n        this.render('appBody', { to: \"template1\" });                                                                   // 467\n        this.render('emptyTemplate', { to: \"template2\" });                                                             // 468\n      } else if (Meteor.user().profile.current_response_id == '') {                                                    //\n        this.next();                                                                                                   // 471\n        this.render('emptyTemplate', { to: \"template1\" });                                                             // 472\n        this.render('quizSelect', { to: \"template2\" });                                                                // 473\n      } else if ((Session.get('subscribed') === 'Subscribe' || Session.get('selectedType') === 'Group') && ThisResponse.findOne(Meteor.users.findOne(Meteor.user()).profile.current_response_id).waiting_time > 0) {\n        this.next();                                                                                                   // 476\n        this.render('emptyTemplate', { to: \"template1\" });                                                             // 477\n        this.render('waiting_time', { to: \"template2\" });                                                              // 478\n        //Session.set('subscribed', '');                                                                               //\n      } else if (ThisResponse.findOne(Meteor.users.findOne(Meteor.user()).profile.current_response_id).time_left <= 0 || Session.get('final_answer') === 'submit') {\n          this.next();                                                                                                 // 483\n          if (Session.get('final_answer') === 'submit') {                                                              // 484\n            this.render('scoreCard', { to: \"template1\" });                                                             // 485\n            this.render('emptyTemplate', { to: \"template2\" });                                                         // 486\n          }                                                                                                            //\n          // Session.clear('selectedType');                                                                            //\n          // Meteor.users.update(Meteor.user(), {$set: {\"profile.current_response_id\": \"\" }});                         //\n          clearInterval('updateTimeLeft');                                                                             // 482\n          clearInterval('updateWaitingTimeLeft');                                                                      // 491\n        } else {                                                                                                       //\n          this.next();                                                                                                 // 494\n          // this.render('emptyTemplate', {to:\"template1\"});                                                           //\n          //  this.render('waiting_time', {to:\"template2\"});                                                           //\n          this.render('questionSelect', { to: \"template1\" });                                                          // 493\n          this.render('questionShow', { to: \"template2\" });                                                            // 498\n        }                                                                                                              //\n    }                                                                                                                  //\n                                                                                                                       //\n    return onBeforeAction;                                                                                             //\n  }()                                                                                                                  //\n});                                                                                                                    //\n                                                                                                                       //\nRouter.route('/ranking', {                                                                                             // 504\n  template: 'ranking',                                                                                                 // 505\n  name: 'ranking'                                                                                                      // 506\n                                                                                                                       //\n});                                                                                                                    //\n                                                                                                                       //\n/* **************************************************************************************************** */             //\n                                                                                                                       //\nif (Meteor.isServer) {                                                                                                 // 512\n  var previousValue = 0;                                                                                               // 513\n  Meteor.methods({                                                                                                     // 514\n                                                                                                                       //\n    getResponseSet: function () {                                                                                      // 516\n      function getResponseSet() {                                                                                      // 516\n                                                                                                                       //\n        var responseID = Meteor.user().profile.current_response_id;                                                    // 518\n                                                                                                                       //\n        var response = ThisResponse.findOne(responseID);                                                               // 520\n                                                                                                                       //\n        var userId = Meteor.userId();                                                                                  // 522\n                                                                                                                       //\n        console.log('User ' + userId);                                                                                 // 524\n                                                                                                                       //\n        var answer = eval('response.answers.' + userId);                                                               // 526\n        //var answer = response.answers.userId;                                                                        //\n        console.log(answer);                                                                                           // 516\n        return answer;                                                                                                 // 529\n      }                                                                                                                //\n                                                                                                                       //\n      return getResponseSet;                                                                                           //\n    }(),                                                                                                               //\n                                                                                                                       //\n    getQuestionSet: function () {                                                                                      // 534\n      function getQuestionSet() {                                                                                      // 534\n                                                                                                                       //\n        var responseID = Meteor.user().profile.current_response_id;                                                    // 536\n                                                                                                                       //\n        var response = ThisResponse.findOne(responseID);                                                               // 538\n        var userId = Meteor.userId();                                                                                  // 539\n                                                                                                                       //\n        var currentQuiz = response.quizID;                                                                             // 542\n                                                                                                                       //\n        var correctOption = ThisQuiz.findOne(currentQuiz);                                                             // 544\n        var quizQuestions = correctOption.quiz;                                                                        // 545\n        return quizQuestions;                                                                                          // 546\n      }                                                                                                                //\n                                                                                                                       //\n      return getQuestionSet;                                                                                           //\n    }(),                                                                                                               //\n                                                                                                                       //\n    getActualScore: function () {                                                                                      // 550\n      function getActualScore() {                                                                                      // 550\n        var responseID = Meteor.user().profile.current_response_id;                                                    // 551\n        var eachScore = [];                                                                                            // 552\n                                                                                                                       //\n        var response = ThisResponse.findOne(responseID);                                                               // 554\n        var userId = Meteor.userId();                                                                                  // 555\n                                                                                                                       //\n        var answer = eval('response.answers.' + userId);                                                               // 557\n        //   var answer = response.answers.userId;                                                                     //\n        var currentQuiz = response.quizID;                                                                             // 550\n                                                                                                                       //\n        var correctOption = ThisQuiz.findOne(currentQuiz);                                                             // 561\n        var quizQuestions = correctOption.quiz;                                                                        // 562\n                                                                                                                       //\n        var cor_array = [];                                                                                            // 564\n        var score = 0;                                                                                                 // 565\n                                                                                                                       //\n        for (var i = 0; i < 2; i++) {                                                                                  // 567\n          var correct = correctOption.quiz[i];                                                                         // 568\n          var cor = correct.answer;                                                                                    // 569\n          var p = 'option' + cor;                                                                                      // 570\n                                                                                                                       //\n          var cor = 'option' + cor;                                                                                    // 572\n          cor_array[i] = eval('correct.' + p);                                                                         // 573\n          console.log(cor_array[i]);                                                                                   // 574\n        }                                                                                                              //\n                                                                                                                       //\n        for (var i = 0; i < 2; i++) {                                                                                  // 579\n          if (answer[i + 1] === cor_array[i]) {                                                                        // 580\n            eachScore[i] = 10;                                                                                         // 582\n            score += 10;                                                                                               // 583\n          } else {                                                                                                     //\n            eachScore[i] = 0;                                                                                          // 588\n          }                                                                                                            //\n        }                                                                                                              //\n                                                                                                                       //\n        response.score[userId] = score;                                                                                // 592\n        console.log(response._id + \"  \" + response.score.userId);                                                      // 593\n        eachScore[2] = score;                                                                                          // 594\n        // console.log('b..............'+eachScore[2]);                                                                //\n        //Session.set('score', score);                                                                                 //\n        //console.log(response.score.userId);                                                                          //\n                                                                                                                       //\n        return eachScore;                                                                                              // 550\n      }                                                                                                                //\n                                                                                                                       //\n      return getActualScore;                                                                                           //\n    }(),                                                                                                               //\n                                                                                                                       //\n    getRanking: function () {                                                                                          // 603\n      function getRanking() {                                                                                          // 603\n        //var responseID = 'vxprdPF2CG9jdvRQZ';                                                                        //\n        var responseID = Meteor.user().profile.current_response_id;                                                    // 605\n        var scores = ThisResponse.findOne(responseID).score;                                                           // 606\n        var temp = {};                                                                                                 // 607\n                                                                                                                       //\n        for (var key in meteorBabelHelpers.sanitizeForInObject(scores)) {                                              // 609\n          temp[Meteor.users.findOne(key).emails[0].address] = scores[key];                                             // 610\n        }                                                                                                              //\n                                                                                                                       //\n        scores = temp;                                                                                                 // 613\n                                                                                                                       //\n        var sortable = [];                                                                                             // 615\n        for (var entry in meteorBabelHelpers.sanitizeForInObject(scores)) {                                            // 616\n          sortable.push([entry, scores[entry]]);                                                                       // 617\n        }sortable.sort(function (a, b) {                                                                               //\n          return b[1] - a[1];                                                                                          // 618\n        });                                                                                                            //\n        console.log(sortable); //output [ [ 's@s.com', 10 ], [ 'a@a.com', 0 ] ]                                        // 619\n                                                                                                                       //\n        return sortable;                                                                                               // 603\n                                                                                                                       //\n        //  in robomongo                                                                                               //\n        // \"score\" : {                                                                                                 //\n        //       \"E6WjBZ79CuoLnXByn\" : 0,                                                                              //\n        //       \"ygeNxqaFoFFmTdkzy\" : 10                                                                              //\n        //   },                                                                                                        //\n      }                                                                                                                // 603\n                                                                                                                       //\n      return getRanking;                                                                                               //\n    }(),                                                                                                               //\n                                                                                                                       //\n    getQuiz: function () {                                                                                             // 630\n      function getQuiz() {                                                                                             // 630\n        var responseID = Meteor.user().profile.current_response_id;                                                    // 631\n        var quizID = ThisResponse.findOne(responseID).quizID;                                                          // 632\n        var randomQuiz = ThisQuiz.findOne(quizID);                                                                     // 633\n        var quizQuestions = randomQuiz.quiz;                                                                           // 634\n        for (var i = 0; i < quizQuestions.length; i++) {                                                               // 635\n          delete quizQuestions[i][\"answer\"];                                                                           // 636\n        }                                                                                                              //\n        return quizQuestions;                                                                                          // 638\n      }                                                                                                                //\n                                                                                                                       //\n      return getQuiz;                                                                                                  //\n    }(),                                                                                                               //\n                                                                                                                       //\n    getRandomQuizID: function () {                                                                                     // 641\n      function getRandomQuizID(category) {                                                                             // 641\n        var randomQuiz = ThisQuiz.find({ category: category }).fetch();                                                // 642\n        var index = Math.floor(Math.random() * randomQuiz.length);                                                     // 643\n        if (index === previousValue) {                                                                                 // 644\n          index = (index + 1) % randomQuiz.length;                                                                     // 645\n          previousValue = index;                                                                                       // 646\n        }                                                                                                              //\n        //console.log(index);                                                                                          //\n        randomQuiz = randomQuiz[index];                                                                                // 641\n        return randomQuiz._id;                                                                                         // 650\n      }                                                                                                                //\n                                                                                                                       //\n      return getRandomQuizID;                                                                                          //\n    }(),                                                                                                               //\n                                                                                                                       //\n    createResponse: function () {                                                                                      // 653\n      function createResponse(type, category) {                                                                        // 653\n        var _answers;                                                                                                  //\n                                                                                                                       //\n        if (!Meteor.userId()) {                                                                                        // 655\n          throw new Meteor.Error('not-authorized');                                                                    // 655\n        }                                                                                                              //\n                                                                                                                       //\n        var quizID = Meteor.call('getRandomQuizID', category);                                                         // 657\n                                                                                                                       //\n        var responseID = ThisResponse.insert({                                                                         // 659\n          userID: [Meteor.userId()],                                                                                   // 660\n          category: category,                                                                                          // 661\n          quizID: quizID,                                                                                              // 662\n          type: type,                                                                                                  // 663\n          answers: (_answers = {}, _answers[Meteor.userId()] = {}, _answers),                                          // 664\n          time_left: 60,                                                                                               // 665\n          waiting_time: 60,                                                                                            // 666\n          score: {},                                                                                                   // 667\n          conductedAt: new Date()                                                                                      // 668\n        });                                                                                                            //\n                                                                                                                       //\n        Meteor.users.update(Meteor.user(), { $set: { \"profile.current_response_id\": responseID } });                   // 671\n      }                                                                                                                //\n                                                                                                                       //\n      return createResponse;                                                                                           //\n    }(),                                                                                                               //\n                                                                                                                       //\n    setResponse: function () {                                                                                         // 674\n      function setResponse(question, answer) {                                                                         // 674\n        var _$set;                                                                                                     //\n                                                                                                                       //\n        var responseID = Meteor.user().profile.current_response_id;                                                    // 675\n        var user = Meteor.userId();                                                                                    // 676\n        ThisResponse.update(responseID, { $set: (_$set = {}, _$set['answers.' + user + '.' + question] = answer, _$set) });\n      }                                                                                                                //\n                                                                                                                       //\n      return setResponse;                                                                                              //\n    }(),                                                                                                               //\n                                                                                                                       //\n    getResponse: function () {                                                                                         // 680\n      function getResponse(question) {                                                                                 // 680\n        var responseID = Meteor.user().profile.current_response_id;                                                    // 681\n        var user = Meteor.userId();                                                                                    // 682\n        var response = ThisResponse.findOne(responseID).answers;                                                       // 683\n        var answer = eval('response.' + user + '[' + question + ']');                                                  // 684\n        return answer;                                                                                                 // 685\n      }                                                                                                                //\n                                                                                                                       //\n      return getResponse;                                                                                              //\n    }(),                                                                                                               //\n                                                                                                                       //\n    setTimer: function () {                                                                                            // 688\n      function setTimer(new_time) {                                                                                    // 688\n        var responseID = Meteor.user().profile.current_response_id;                                                    // 689\n        var response = ThisResponse.findOne(responseID);                                                               // 690\n        if (response.time_left > new_time) ThisResponse.update(response._id, { $set: { time_left: new_time } });       // 691\n      }                                                                                                                //\n                                                                                                                       //\n      return setTimer;                                                                                                 //\n    }(),                                                                                                               //\n                                                                                                                       //\n    getTimer: function () {                                                                                            // 695\n      function getTimer() {                                                                                            // 695\n        var responseID = Meteor.user().profile.current_response_id;                                                    // 696\n        return ThisResponse.findOne(responseID).time_left;                                                             // 697\n      }                                                                                                                //\n                                                                                                                       //\n      return getTimer;                                                                                                 //\n    }(),                                                                                                               //\n    endquiz: function () {                                                                                             // 699\n      function endquiz(id) {                                                                                           // 699\n        Meteor.users.update({ _id: id }, { $set: { \"profile.current_response_id\": \"\" } });                             // 700\n      }                                                                                                                //\n                                                                                                                       //\n      return endquiz;                                                                                                  //\n    }(),                                                                                                               //\n                                                                                                                       //\n    setWaitingTimer: function () {                                                                                     // 703\n      function setWaitingTimer(new_time) {                                                                             // 703\n        var responseID = Meteor.user().profile.current_response_id;                                                    // 704\n        var response = ThisResponse.findOne(responseID);                                                               // 705\n        if (response.waiting_time > new_time) ThisResponse.update(response._id, { $set: { waiting_time: new_time } });\n      }                                                                                                                //\n                                                                                                                       //\n      return setWaitingTimer;                                                                                          //\n    }(),                                                                                                               //\n                                                                                                                       //\n    getWaitingTimer: function () {                                                                                     // 710\n      function getWaitingTimer() {                                                                                     // 710\n        var responseID = Meteor.user().profile.current_response_id;                                                    // 711\n        return ThisResponse.findOne(responseID).waiting_time;                                                          // 712\n      }                                                                                                                //\n                                                                                                                       //\n      return getWaitingTimer;                                                                                          //\n    }(),                                                                                                               //\n                                                                                                                       //\n    'setGroupResponseId': function () {                                                                                // 715\n      function setGroupResponseId(responseID) {                                                                        // 715\n        Meteor.users.update(Meteor.user(), { $set: { \"profile.current_response_id\": responseID } });                   // 716\n      }                                                                                                                //\n                                                                                                                       //\n      return setGroupResponseId;                                                                                       //\n    }()                                                                                                                //\n                                                                                                                       //\n  });                                                                                                                  //\n}                                                                                                                      //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},{\"extensions\":[\".js\",\".json\"]});\nrequire(\"./ind_quiz.js\");","servePath":"/app.js","sourceMap":{"version":3,"sources":["/ind_quiz.js"],"names":[],"mappings":"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","file":"/app.js","sourcesContent":["ThisQuiz = new Mongo.Collection(\"quizzes\");\r\nThisResponse = new Mongo.Collection(\"responses\");\r\nvar q=0;\r\nif (Meteor.isClient) {\r\n      var updateTimeLeft;\r\n      Template.signupForm.events({\r\n    'submit #signup-form': function(e,t){\r\n      e.preventDefault();\r\n\r\n      var input=t.find('#signup-password').value;\r\n      var input2=t.find('#signup-confirm').value;\r\n      if(input.length<4 || input.length> 8)  \r\n          {   \r\n          alert(\"Please input the password between \" +4+ \" and \" +8+ \" characters\");  \r\n                return false;  \r\n          }  \r\n        else{\r\n            if(input!=input2){\r\n              alert(\"Password Mismatch\");\r\n            }\r\n\r\n            else{\r\n      Accounts.createUser({\r\n        username:t.find('#signup-username').value,\r\n        password:t.find('#signup-password').value,\r\n        email:t.find('#signup-email').value,\r\n        profile:{\r\n          confirm:t.find('#signup-confirm').value,\r\n          current_response_id:\"\"\r\n        }\r\n\r\n      });\r\n      \r\n      t.find('#signup-username').value = \"\";\r\n      t.find('#signup-password').value = \"\";\r\n      t.find('#signup-email').value = \"\";\r\n      t.find('#signup-confirm').value = \"\";\r\n      //console.log(\"signed up\");\r\n    //  Meteor.logout();\r\n          }\r\n      }\r\n    }\r\n  });\r\n\r\n Template.loginForm.events({\r\n    'submit #login-form': function(e,t) {\r\n      e.preventDefault();\r\n\r\n       var unam = t.find('#login-username').value;\r\n       var password=t.find('#login-password').value;\r\n     \r\n         Meteor.loginWithPassword(unam,password);\r\n         Router.go('quiz');\r\n    }\r\n});\r\n\r\n\r\n  var quizQuestions = [];\r\n\r\n  changeAnswer = function(question){\r\n     Meteor.call(\"getResponse\", question, function(error, result){\r\n      if (error)\r\n        console.log(error.reason);\r\n      else {\r\n        if (result)\r\n          $('input[name=questionAnswer][value=' + result + ']').prop('checked',true);\r\n        else\r\n          $('input[name=questionAnswer]').prop('checked',false);\r\n      }\r\n    });\r\n  }\r\n\r\n  /* **************************************************************************************************** */\r\n\r\n  Template.questionSelect.onCreated( function() {\r\n    this.time_left = new ReactiveVar(1200);\r\n    Session.clear('updateTimeLeft');\r\n  });\r\n\r\n  Template.waiting_time.onCreated( function() {\r\n    this.time_left = new ReactiveVar(300);\r\n    Session.clear('updateWaitingTimeLeft');\r\n  });\r\n\r\n  Template.questionSelect.onRendered( function() {\r\n    clearInterval(Session.get('updateTimeLeft'));\r\n    var self = this;\r\n\r\n    Meteor.call(\"getQuiz\", function(error, result){\r\n      if (error)\r\n        console.log(error.reason);\r\n      else {\r\n        quizQuestions = result;\r\n        Session.set('selectedQuestion', '1');\r\n        changeAnswer('1');\r\n      }\r\n    });\r\n\r\n\r\n\r\n    Meteor.call(\"getTimer\", function(error, result){\r\n      if (error)\r\n        console.log(error.reason);\r\n      else {\r\n        self.time_left.set(result);\r\n      }\r\n    });\r\n\r\n    updateTimeLeft = setInterval( function() {\r\n      self.time_left.set(self.time_left.get() - 1);\r\n      Meteor.call('setTimer', self.time_left.get());\r\n    } , 1000 );\r\n    Session.setPersistent('updateTimeLeft', updateTimeLeft);\r\n    //setTimeLeft =  setInterval( function() {Meteor.call('setTimer', self.time_left.get())} , 5000 );\r\n    //Session.set('updateTimeLeft', updateTimeLeft);\r\n    //Session.set('setTimeLeft', setTimeLeft);\r\n  });\r\n\r\n  Template.questionSelect.onDestroyed(function() {\r\n    //console.log('Naman');\r\n    clearInterval('updateTimeLeft');\r\n  });\r\n\r\n  Template.waiting_time.onDestroyed(function() {\r\n    //console.log('Naman');\r\n    clearInterval('updateWaitingTimeLeft');\r\n    Session.clear('subscribed');\r\n  });\r\n\r\n  Template.waiting_time.onRendered( function() {\r\n    clearInterval(Session.get('updateWaitingTimeLeft'));\r\n    var self = this;\r\n\r\n    Meteor.call(\"getWaitingTimer\", function(error, result){\r\n      if (error)\r\n        console.log(error.reason);\r\n      else {\r\n        self.time_left.set(result);\r\n      }\r\n    });\r\n\r\n    updateWaitingTimeLeft = setInterval( function() {\r\n      self.time_left.set(self.time_left.get() - 1);\r\n      Meteor.call('setWaitingTimer', self.time_left.get());\r\n    } , 1000 );\r\n    Session.set('updateWaitingTimeLeft', updateWaitingTimeLeft);\r\n    // Session.set('updateTimeLeft', updateTimeLeft);\r\n    // Session.set('setTimeLeft', setTimeLeft); \r\n\r\n  });\r\n  Template.waiting_time.events({\r\n   \r\n      'click #logoutbtn': function() {\r\n     Meteor.call('endquiz',Meteor.userId());\r\n     clearInterval(Session.get('updateWaitingTimeLeft'));\r\n     clearInterval(Session.get('updateTimeLeft'));\r\n     Session.clear('final_answer');\r\n     Session.clear('subscribed');\r\n      Meteor.logout();\r\n\r\n    }\r\n  }); \r\n  \r\n\r\n  Template.questionSelect.events({\r\n    'click input': function( event,template ) {\r\n      Session.set('selectedQuestion', event.target.value);\r\n      changeAnswer(event.target.value);\r\n    }\r\n  });\r\n\r\n  Template.online.helpers({\r\n    'showGroupQuizzes': function() {\r\n      var groupQuizzes = ThisResponse.find({type: 'Group'}).fetch();\r\n      var time = new Date();\r\n      for(i = 0; i < groupQuizzes.length; i++) {\r\n        // var date = new Date(Date.parse(time) - Date.parse(groupQuizzes[i].createdAt));\r\n        // if(date.getMinutes() > 30) {\r\n        //   groupQuizzes.splice(i, 1);\r\n        // }\r\n        if(groupQuizzes[i].waiting_time <= 0) {\r\n          console.log('Hello');\r\n          groupQuizzes.splice(i, 1);\r\n        }\r\n    }\r\n    return groupQuizzes;\r\n  },\r\n    'totalGroupQuizzes': function() {\r\n      var groupQuizzes = ThisResponse.find({type: 'Group'}).fetch();\r\n      var time = new Date();\r\n      for(i = 0; i < groupQuizzes.length; i++) {\r\n        // var date = new Date(Date.parse(time) - Date.parse(groupQuizzes[i].createdAt));\r\n        // if(date.getMinutes() > 30) {\r\n        //   groupQuizzes.splice(i, 1);\r\n        // }\r\n        if(groupQuizzes[i].waiting_time <= 0) {\r\n          groupQuizzes.splice(i, 1);\r\n        }\r\n    }\r\n    return groupQuizzes.length > 0;\r\n    }\r\n});\r\n\r\n  Template.online.events({\r\n    'click input': function() {\r\n      event.preventDefault();\r\n      // var quizID = $(event.target).attr('id');\r\n      // var userID = $(event.target).attr('name');\r\n      var responseID = $(event.target).attr('id');\r\n      var subscribed = $(event.target).attr('value');\r\n      console.log(subscribed);\r\n      Session.setPersistent('subscribed', subscribed);\r\n      // var category = ThisResponse.find({userID: userID, quizID: quizID}).fetch()[0].category;\r\n      // var timeLeft = ThisResponse.find({userID: userID, quizID: quizID}).fetch()[0].waiting_time;\r\n      // console.log(quizID+\"  \"+userID+\"  \"+category+\"  \"+timeLeft+\"  \"+responseID);\r\n      Meteor.call('setGroupResponseId', responseID);\r\n    }\r\n  });\r\n\r\n  Template.questionSelect.helpers({\r\n    time_left: function() {\r\n      var time = Template.instance().time_left.get();\r\n      Session.set('timeLeft', time);\r\n      var minutes = ((Math.floor(time/60) < 10) ? '0' : '') + Math.floor(time/60);\r\n      var seconds = ((time%60 < 10) ? '0' : '') + (time%60);\r\n      if(time <= 0) {\r\n       clearInterval(Session.get('updateWaitingTimeLeft'));\r\n     clearInterval(Session.get('updateTimeLeft'));\r\n     Session.clear('final_answer')\r\n     Session.clear('subscribed');\r\n      }\r\n      return minutes+\":\"+seconds;\r\n    },\r\n     'ended': function() {\r\n       return Session.get('timeLeft') <= 0;\r\n     }\r\n  }); \r\n\r\n  Template.waiting_time.helpers({\r\n    time_left: function() {\r\n      var time = Template.instance().time_left.get();\r\n      Session.set('timeLeft', time);\r\n      var minutes = ((Math.floor(time/60) < 10) ? '0' : '') + Math.floor(time/60);\r\n      var seconds = ((time%60 < 10) ? '0' : '') + (time%60);\r\n      if(time <= 0) {\r\n        clearInterval(Session.get('updateWaitingTimeLeft'));\r\n     clearInterval(Session.get('updateTimeLeft'));\r\n     Session.clear('final_answer')\r\n     Session.clear('subscribed');\r\n      }\r\n      return minutes+\":\"+seconds;\r\n    }\r\n  }); \r\n\r\n  /* **************************************************************************************************** */\r\n  \r\n  Template.questionShow.events({\r\n    'click input': function( event,template ) {\r\n      Meteor.call('setResponse', parseInt(Session.get('selectedQuestion')) , event.target.value );\r\n    },\r\n    'click #logoutbtn': function() {\r\n     Meteor.call('endquiz',Meteor.userId());\r\n     clearInterval(Session.get('updateWaitingTimeLeft'));\r\n     clearInterval(Session.get('updateTimeLeft'));\r\n     Session.clear('final_answer')\r\n     Session.clear('subscribed');\r\n      Meteor.logout();\r\n\r\n    },\r\n     'click #onsubmitbutton' :function(){\r\n\r\n      var final_answer = $('#onsubmitbutton').attr('value');\r\n      Session.setPersistent('final_answer',final_answer);\r\n      console.log(\"going Here\");\r\n      Meteor.call(\"getQuestionSet\", function(error, result){\r\n      if (error){\r\n       \r\n        console.log(error.reason);\r\n        \r\n      }\r\n      else {\r\n      \r\n        Session.set('selectedScore', result);\r\n        console.log(Session.get('selectedScore'));     \r\n      }\r\n    });\r\n\r\n      Meteor.call(\"getResponseSet\", function(error, result){\r\n      if (error){\r\n        //console.log(\"Chu\");\r\n        console.log(error.reason);\r\n        \r\n      }\r\n      else {\r\n        Session.set('selectedScore1', result);\r\n       console.log(Session.get('selectedScore1'));\r\n      }\r\n    });\r\n\r\n      Meteor.call(\"getActualScore\", function(error, result){\r\n      if (error){\r\n        \r\n        console.log(error.reason);\r\n        \r\n      }\r\n      else {\r\n      \r\n        Session.set('selectedScore2', result);\r\n        console.log(Session.get('selectedScore2'));\r\n        console.log(\"aaasssssss\"+ Session.get('selectedScore2'));\r\n      }\r\n    });\r\n      Router.go('scoreCard');\r\n  }\r\n  }); \r\n\r\n  Template.questionShow.helpers({\r\n    questionData: function() {\r\n      return quizQuestions[parseInt(Session.get('selectedQuestion')) - 1];\r\n    },\r\n\r\n   'showSubmitButton': function() {\r\n    return Session.get('selectedType') === 'Individual' || ThisResponse.findOne(Meteor.users.findOne(Meteor.user()).profile.current_response_id).time_left <= 0;  \r\n   }\r\n  });   \r\n\r\n  /* **************************************************************************************************** */\r\n\r\n  Template.quizSelect.events({  \r\n    \"submit .quizParameters\": function (event) {\r\n      event.preventDefault();\r\n      var selectedType =  event.target.quizType.value;\r\n      var selectedCategory =  event.target.quizCategory.value;\r\n      Session.setPersistent('selectedType', selectedType);\r\n      Meteor.call(\"createResponse\", selectedType, selectedCategory);\r\n    },\r\n    'click #logoutbtn': function() {\r\n      Meteor.call('endquiz',Meteor.userId());\r\n     clearInterval(Session.get('updateWaitingTimeLeft'));\r\n     clearInterval(Session.get('updateTimeLeft'));\r\n     Session.clear('final_answer')\r\n     Session.clear('subscribed');\r\n      Meteor.logout();\r\n    }\r\n\r\n  });\r\n\r\n Template.scoreCard.events({  \r\n   \r\n    'click #logoutbtn': function() {\r\n      Meteor.call('endquiz',Meteor.userId());\r\n     clearInterval(Session.get('updateWaitingTimeLeft'));\r\n     clearInterval(Session.get('updateTimeLeft'));\r\n     Session.clear('final_answer')\r\n     Session.clear('subscribed');\r\n      Meteor.logout();\r\n    },\r\n\r\n    'click #onsubmitbutton' :function(){\r\n    Meteor.call(\"getRanking\", function(error, result){\r\n      if (error){\r\n             \r\n        console.log(error.reason);\r\n        \r\n      }\r\n      else {\r\n        \r\n        Session.set('rank', result);\r\n        console.log(Session.get('rank'));     \r\n      }\r\n    });\r\n\r\n    Router.go('ranking');\r\n  }\r\n\r\n  });\r\n\r\n\r\n  Template.scoreCard.helpers({\r\n \r\n  questionData: function(){\r\n   \r\n     var arr1=[];\r\n    var arr2=[];\r\n    var arr3=[];\r\n    var arr4=[];\r\n    var arr5=[];\r\n     var arr6=[];\r\n     var arr7 = [];\r\n     var arr8=[];\r\n     var arrayFinal = [];\r\n    for(var i=0;i<2;i++)\r\n    {\r\n      arr1[i]=Session.get('selectedScore')[i].question;\r\n    //  console.log('arr1 '+arr1[i]);\r\n      arr2[i]=Session.get('selectedScore')[i].option1;\r\n      arr3[i]=Session.get('selectedScore')[i].option2;\r\n      arr4[i]=Session.get('selectedScore')[i].option3;\r\n      arr5[i]=Session.get('selectedScore')[i].option4;\r\n      arr6[i]=Session.get('selectedScore')[i].answer;\r\n   //   console.log('arr2 '+arr2[i]);\r\n       arr7[i]=Session.get('selectedScore1')[i+1];\r\n\r\n       arr8[i]=Session.get('selectedScore2')[i];\r\n  //console.log('arr8 '+arr8[i]);\r\n       var obj  = {arr1: arr1[i] , arr2: arr2[i], arr3: arr3[i], arr4: arr4[i], arr5: arr5[i], arr6: arr6[i], arr7: arr7[i], arr8: arr8[i]};\r\n       arrayFinal.push(obj);\r\n\r\n\r\n     }\r\n\r\n     console.log(\"here....................\",arrayFinal);\r\n     //return {k1 : Session.get('selectedScore')[0], k2 : Session.get('selectedScore1')[1]};\r\n     console.log('final............. '+arrayFinal[0].arr1);\r\n     return arrayFinal;\r\n    //return {question : 'Hi', option1: 'Hellow'};\r\n  },\r\n\r\n  'getTotalScore': function() {\r\n    return Session.get('selectedScore2')[2];\r\n  }\r\n\r\n  }); \r\n\r\n\r\n\r\nTemplate.ranking.helpers({\r\n  'userRanking' : function(){\r\n    var arr1 = [];\r\n    var arr2 = [];\r\n\r\n    var array = [];\r\n    console.log(\"......................->\" +Session.get('rank') + \"<-......................\");\r\n    for(var i=0;i<2;i++){\r\n      arr1[i] = Session.get('rank')[i][0];\r\n      arr2[i] = Session.get('rank')[i][1];\r\n      var obj = {arr1: arr1[i], arr2: arr2[i]};\r\n      console.log(obj + \"Hello\");\r\n      array.push(obj);\r\n    }\r\n    return array;\r\n  }  \r\n});\r\n\r\n  /* **************************************************************************************************** */\r\n}\r\n\r\n// Router.configure({\r\n//   layoutTemplate: 'ApplicationLayout'\r\n// });\r\n\r\n// Router.route('/scoreCard',{\r\n// name:'scoreCard',\r\n// template:'scoreCard'\r\n// });\r\nRouter.route('/', {\r\n  name: 'home',\r\n  template: 'appBody'\r\n});\r\n\r\nRouter.route('/quiz',{\r\n  name: 'quiz',\r\n  template: 'ApplicationLayout',\r\n  onBeforeAction: function() {\r\n  if (! Meteor.userId()) {\r\n    this.next(); \r\n    this.render('appBody', {to:\"template1\"});\r\n    this.render('emptyTemplate', {to:\"template2\"}); \r\n  }\r\n  else if (Meteor.user().profile.current_response_id == '') {\r\n    this.next();\r\n    this.render('emptyTemplate', {to:\"template1\"});\r\n    this.render('quizSelect', {to:\"template2\"});\r\n  }\r\n  else if((Session.get('subscribed') === 'Subscribe' || (Session.get('selectedType') === 'Group')) && ThisResponse.findOne(Meteor.users.findOne(Meteor.user()).profile.current_response_id).waiting_time > 0)  {\r\n       this.next();\r\n       this.render('emptyTemplate', {to:\"template1\"});\r\n       this.render('waiting_time', {to:\"template2\"});\r\n       //Session.set('subscribed', '');      \r\n  }\r\n\r\n  else if(ThisResponse.findOne(Meteor.users.findOne(Meteor.user()).profile.current_response_id).time_left <= 0 || Session.get('final_answer')==='submit'){\r\n    this.next();\r\n    if(Session.get('final_answer')==='submit') {\r\n      this.render('scoreCard',{to:\"template1\"});\r\n      this.render('emptyTemplate', {to:\"template2\"});\r\n   }\r\n     // Session.clear('selectedType');\r\n     // Meteor.users.update(Meteor.user(), {$set: {\"profile.current_response_id\": \"\" }});\r\n     clearInterval('updateTimeLeft');    \r\n     clearInterval('updateWaitingTimeLeft');\r\n  }\r\n  else{\r\n      this.next();\r\n     // this.render('emptyTemplate', {to:\"template1\"});\r\n     //  this.render('waiting_time', {to:\"template2\"}); \r\n    this.render('questionSelect', {to:\"template1\"});\r\n     this.render('questionShow', {to:\"template2\"});\r\n\r\n  }\r\n }\r\n});\r\n\r\nRouter.route('/ranking',{\r\n  template: 'ranking',\r\n  name : 'ranking'\r\n\r\n});\r\n\r\n  /* **************************************************************************************************** */\r\n\r\nif(Meteor.isServer){\r\nvar previousValue = 0;\r\nMeteor.methods({\r\n\r\n  getResponseSet: function (){\r\n\r\n  var responseID = Meteor.user().profile.current_response_id;\r\n \r\n  var response = ThisResponse.findOne(responseID);\r\n \r\n  var userId = Meteor.userId();\r\n \r\n  console.log('User '+userId);\r\n  \r\n  var answer = eval('response.answers.' + userId);\r\n  //var answer = response.answers.userId;\r\nconsole.log(answer);\r\n  return answer;\r\n\r\n\r\n  },\r\n\r\n  getQuestionSet: function(){\r\n  \r\n   var responseID = Meteor.user().profile.current_response_id;\r\n\r\n  var response = ThisResponse.findOne(responseID);\r\n  var userId = Meteor.userId();\r\n  \r\n \r\n   var currentQuiz=response.quizID;\r\n\r\n  var correctOption=(ThisQuiz.findOne(currentQuiz));\r\n  var quizQuestions = correctOption.quiz;\r\n  return quizQuestions;\r\n  \r\n},\r\n\r\n  getActualScore: function(){\r\n  var responseID = Meteor.user().profile.current_response_id;\r\n  var eachScore = [];\r\n  \r\n  var response = ThisResponse.findOne(responseID);\r\n  var userId = Meteor.userId();\r\n  \r\n  var answer = eval('response.answers.' + userId);\r\n//   var answer = response.answers.userId;\r\n   var currentQuiz = response.quizID;\r\n\r\n  var correctOption= ThisQuiz.findOne(currentQuiz);\r\n  var quizQuestions = correctOption.quiz;\r\n \r\n  var cor_array=[];\r\n  var score=0;\r\n\r\n  for(var i=0;i<2;i++){\r\n    var correct=correctOption.quiz[i];\r\n    var cor=correct.answer;\r\n    var p='option'+cor;\r\n  \r\n    var cor='option'+cor;\r\n    cor_array[i]=eval('correct.'+p);\r\n    console.log(cor_array[i]);\r\n\r\n  \r\n  }\r\n \r\n  for(var i=0;i<2;i++){\r\n    if(answer[i+1]===cor_array[i])\r\n    {\r\n      eachScore[i] = 10;\r\n      score+=10;\r\n    \r\n    }\r\n\r\n    else{\r\n      eachScore[i] = 0;\r\n    }\r\n  }\r\n\r\n  response.score[userId] = score;\r\n  console.log(response._id+\"  \"+response.score.userId);\r\n  eachScore[2] = score;\r\n // console.log('b..............'+eachScore[2]);\r\n  //Session.set('score', score);\r\n  //console.log(response.score.userId);\r\n\r\n\r\n  return eachScore;\r\n},\r\n\r\ngetRanking: function(){\r\n    //var responseID = 'vxprdPF2CG9jdvRQZ';\r\n    var responseID = Meteor.user().profile.current_response_id;\r\n    var scores = ThisResponse.findOne(responseID).score;\r\n    var temp = {};\r\n\r\n    for (var key in scores) {\r\n      temp[Meteor.users.findOne(key).emails[0].address] = scores[key];\r\n    }\r\n\r\n    scores = temp;\r\n\r\n    var sortable = [];\r\n    for (var entry in scores)\r\n      sortable.push([entry, scores[entry]]);\r\n    sortable.sort(function(a, b) {return b[1] - a[1]})\r\n    console.log(sortable); //output [ [ 's@s.com', 10 ], [ 'a@a.com', 0 ] ]\r\n\r\n    return sortable;\r\n    \r\n    //  in robomongo\r\n    // \"score\" : {\r\n    //       \"E6WjBZ79CuoLnXByn\" : 0,\r\n    //       \"ygeNxqaFoFFmTdkzy\" : 10\r\n    //   },\r\n  },\r\n\r\n  getQuiz: function (){\r\n    var responseID = Meteor.user().profile.current_response_id;\r\n    var quizID = ThisResponse.findOne(responseID).quizID;\r\n    var randomQuiz = ThisQuiz.findOne(quizID);\r\n    var quizQuestions = randomQuiz.quiz;\r\n    for (var i=0 ; i<quizQuestions.length ; i++){\r\n      delete quizQuestions[i][\"answer\"];\r\n    }\r\n    return quizQuestions;\r\n  },\r\n\r\n  getRandomQuizID: function(category){\r\n    var randomQuiz = ThisQuiz.find({category:category}).fetch();\r\n    var index = Math.floor(Math.random() * randomQuiz.length);\r\n    if(index === previousValue) {\r\n      index = (index + 1) % randomQuiz.length;\r\n      previousValue = index;\r\n    }\r\n    //console.log(index);\r\n    randomQuiz = randomQuiz[index];\r\n    return randomQuiz._id;\r\n  },\r\n\r\n  createResponse: function(type, category){\r\n  \r\n    if (! Meteor.userId()) { throw new Meteor.Error('not-authorized'); }\r\n\r\n    var quizID = Meteor.call('getRandomQuizID', category);\r\n\r\n    var responseID = ThisResponse.insert({\r\n      userID: [Meteor.userId()],\r\n      category:category,\r\n      quizID: quizID,\r\n      type: type,\r\n      answers: {[Meteor.userId()]: {}},\r\n      time_left: 60,\r\n      waiting_time: 60,\r\n      score: {},\r\n      conductedAt: new Date()\r\n    });\r\n\r\n    Meteor.users.update(Meteor.user(), {$set: {\"profile.current_response_id\": responseID }});\r\n  },\r\n\r\n  setResponse: function (question, answer){\r\n    var responseID = Meteor.user().profile.current_response_id;\r\n    var user = Meteor.userId();\r\n    ThisResponse.update(responseID, {$set: {['answers.' + user + '.' + question]: answer}});\r\n  },\r\n\r\n  getResponse: function(question){\r\n    var responseID = Meteor.user().profile.current_response_id;\r\n    var user = Meteor.userId();\r\n    var response = ThisResponse.findOne(responseID).answers;\r\n    var answer = eval('response.' + user + '[' + question + ']');\r\n    return answer;\r\n  },\r\n\r\n  setTimer: function(new_time){\r\n    var responseID = Meteor.user().profile.current_response_id;\r\n    var response = ThisResponse.findOne(responseID);\r\n    if (response.time_left > new_time)\r\n      ThisResponse.update(response._id, {$set: {time_left: new_time}});\r\n  },\r\n\r\n  getTimer: function(){\r\n    var responseID = Meteor.user().profile.current_response_id;\r\n    return ThisResponse.findOne(responseID).time_left;\r\n  },\r\n  endquiz:function(id){\r\n   Meteor.users.update({ _id:id},{$set:{\"profile.current_response_id\":\"\"}});\r\n  },\r\n\r\n  setWaitingTimer: function(new_time){\r\n    var responseID = Meteor.user().profile.current_response_id;\r\n    var response = ThisResponse.findOne(responseID);\r\n    if (response.waiting_time > new_time)\r\n      ThisResponse.update(response._id, {$set: {waiting_time: new_time}});\r\n  },\r\n\r\n  getWaitingTimer: function(){\r\n    var responseID = Meteor.user().profile.current_response_id;\r\n    return ThisResponse.findOne(responseID).waiting_time;\r\n  },\r\n\r\n  'setGroupResponseId': function(responseID) {\r\n    Meteor.users.update(Meteor.user(), {$set: {\"profile.current_response_id\": responseID }});      \r\n  }\r\n\r\n});\r\n}"]}}]